generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model delivery {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id         String    @db.Uuid
  driver_id        String    @db.Uuid
  delivery_time    DateTime? @db.Timestamp(6)
  status           String?   @db.VarChar(255)
  delivery_address String?   @db.VarChar(255)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  user             user      @relation(fields: [driver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order            order     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  price           Int?
  category        String?      @db.VarChar(255)
  organization_id String       @db.Uuid
  availability    Boolean?
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item      order_item[]
}

model order {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String       @db.Uuid
  delivery_address String?      @db.VarChar(255)
  total_price      Int?
  status           String?      @db.VarChar(255)
  order_date       DateTime?    @db.Timestamp(6)
  delivery_date    DateTime?    @db.Timestamp(6)
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  delivery         delivery[]
  user             user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item       order_item[]
}

model order_item {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String   @db.Uuid
  menu_id    String   @db.Uuid
  quantity   Int?
  sub_total  Int?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  menu       menu     @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order      order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?  @db.VarChar(255)
  location        String?  @db.VarChar(255)
  operation_hours String?  @db.VarChar(255)
  rating          Int?
  name            String   @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user_id         String   @db.Uuid
  tenant_id       String   @db.VarChar(255)
  menu            menu[]
  user            user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  delivery     delivery[]
  order        order[]
  organization organization[]
}
